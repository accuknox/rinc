package longjobs

import (
	"fmt"
	"time"

	"github.com/accuknox/rinc/internal/db"
	types "github.com/accuknox/rinc/types/longjobs"
	"github.com/accuknox/rinc/view/partial"
)

templ Report(metrics types.Metrics, alerts []db.Alert) {
	@heading(metrics.Timestamp)
	@partial.Alerts(alerts)
	@jobs(metrics.Jobs, metrics.OlderThan)
}

templ heading(stamp time.Time) {
	<h1 class="text-3xl font-bold flex items-center justify-center gap-2 my-5">
		Long Running Jobs ({ stamp.UTC().Format("2006-01-02 15:04:05") } UTC)
	</h1>
}

templ jobs(jobs []types.Job, olderThan time.Duration) {
	<section class="px-3 lg:px-5 mb-5">
		<p class="font-mono mb-2">
			* Following jobs are older than { olderThan.String() }
		</p>
		<table class="full-width-table">
			<thead>
				<th>Name</th>
				<th>Namespace</th>
				<th>Suspended</th>
				<th>Active Pods</th>
				<th>Failed Pods</th>
				<th>Ready Pods</th>
				<th>Age</th>
				<th>Pods</th>
			</thead>
			<tbody>
				for _, job := range jobs {
					<tr>
						<td>{ job.Name }</td>
						<td>{ job.Namespace }</td>
						<td>{ fmt.Sprintf("%v", job.Suspended) }</td>
						<td>{ fmt.Sprintf("%d", job.ActivePods) }</td>
						<td>{ fmt.Sprintf("%d", job.FailedPods) }</td>
						<td>{ fmt.Sprintf("%d", job.ReadyPods) }</td>
						<td>{ job.Age.Round(time.Second).String() }</td>
						<td>
							<table class="full-width-table nested-table">
								<thead>
									<th>Name</th>
									<th>Phase</th>
									<th>Reason</th>
									<th>Containers</th>
								</thead>
								<tbody>
									for _, pod := range job.Pods {
										<tr>
											<td>{ pod.Name }</td>
											<td>{ pod.Phase }</td>
											<td>{ pod.Reason }</td>
											<td>
												<table class="full-width-table nested-table">
													<thead>
														<th>Name</th>
														<th>Ready</th>
														<th>State</th>
														<th>Restart Count</th>
													</thead>
													<tbody>
														for _, c := range pod.Containers {
															<tr>
																<td>
																	{ c.Name }
																	if c.IsInit {
																		(init)
																	}
																</td>
																<td>{ fmt.Sprintf("%v", c.Ready) }</td>
																<td>{ c.State }</td>
																<td>{ fmt.Sprintf("%d", c.RestartCount) }</td>
															</tr>
														}
													</tbody>
												</table>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</section>
}
